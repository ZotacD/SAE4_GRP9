<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="stylesheet" href="/css/chat.css" />
    <title>ADIIL - CHAT</title>
    <script src="https://cdn.jsdelivr.net/npm/peerjs@1.3.2/dist/peerjs.min.js"></script>
</head>
<body>
    <button id="backButton" onclick="window.location.href='/chat/all'" ><img src="/images/backArrow.svg"></button>
    <div id="container">

        <div id="chat-container">
            <h2><%= name_chat %></h2>
            <div id="messages">
            </div>

            <form id="message-form">
                <textarea id="message" placeholder="Écrivez votre message..."></textarea><br>
                <button type="submit">Envoyer</button>
            </form>
        </div>

        <div id="sidebar">
            <form id="add-user-form">
                <input type="email" id="user-email" placeholder="Ajouter un utilisateur par son email..." list="member-datalist" />
                <datalist id="member-datalist"></datalist>
                <button type="submit">Ajouter</button>
            </form>

            <div id="users-list">
                <h3>Utilisateurs</h3>
                <ul id="users"></ul>
            </div>
        </div>
    </div>


    <script defer>
        const container = document.getElementById("container");
        const messageForm = document.querySelector("#message-form");
        const messageInput = document.getElementById('message');
        const messagesDiv = document.getElementById('messages');
        const addUserForm = document.querySelector("#add-user-form");
        const addUserInput = document.querySelector("#user-email");
        const usersList = document.getElementById("users");
        const memberDataList = document.getElementById("member-datalist");

        let connections = {};
        let myPeerId = -1;

        messageForm.addEventListener("submit", async (ev) => {
            ev.preventDefault();
            await sendMessage(peer);
        })

        addUserForm.addEventListener("submit", async (ev) => {
            ev.preventDefault();
            await addUser(addUserInput.value);
        });

        const id_chat = "<%- id_chat %>";
        const email = "<%- email %>";
        const messages = <%- JSON.stringify(messages) %>; 
        const username = "<%- username %>";
        const ip = "<%- ip %>";
        const port = <%- port %>;

        async function getConnections() {
            const response = await fetch('/api/chat/getConnections', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({id_chat: id_chat})
              });
            const data = await response.json();
      
            return data["connections"]
        }

        let peer;

        async function getMembers() {
            const q = addUserInput.value ? addUserInput.value : "@"
            let response = await fetch(`/api/chat/searchChatUser/` + q, {
              method: "GET",
            });
        
            let data = await response.json();
        
            data["users"].forEach((user) => {
              if(email != user.email) {
                let opt = document.createElement("option")
                opt.value = user.email
                memberDataList.appendChild(opt)
              }
            })
          }

        const generatePeerId = () => {
            const timestamp = new Date().getTime();
            const randomString = Math.random().toString(36).substring(2, 10);
            const peerId = `${timestamp}-${randomString}`;
            return peerId;
          };

        async function getUsers() {
            const response = await fetch('/api/chat/getChatUsers', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({id_chat: id_chat})
            });
            const data = await response.json();
            return data
        }

        function appendUserToList(user) {
            const userListElement = document.createElement("li");
            userListElement.textContent = user.email;
            usersList.appendChild(userListElement);
        }

        async function addUser(user) {
            let response = await fetch(`/api/chat/addChatMember`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ email: user, id_chat: id_chat }),
            });
          
            let data = await response.json();
        
            if (data.success) {
                console.log("Le membre a été ajouté avec succès !");
            } else {
                alert("Impossible d'ajouter le membre.");
                return
            }

            response = await fetch(`/api/chat/addConnection`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ email: user, id_chat: id_chat, peer_id: generatePeerId() }),
            });
        
            data = await response.json();
        
            if (data.success) {
                console.log("La connexion a bien été créée !");
            } else {
                console.log("Impossible de créer la connexion.");
                return
            }

            appendUserToList({email: user})
        }
      
        function appendMessage(message, isReceived) {
          let messageDivElement = document.createElement("div");
          messageDivElement.classList.add("message-box");

          if(isReceived) {
            messageDivElement.classList.add("received")
          }else {
            messageDivElement.classList.add("sent")
          }

          let messageParagElemnt = document.createElement('p')
          messageParagElemnt.innerText = message

          messageDivElement.appendChild(messageParagElemnt)
      
          messagesDiv.appendChild(messageDivElement);
          messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
      
        function handleIncomingConnection(peer) {
          peer.on('connection', (connection) => {
              connection.on('open', () => {
                  connection.on('data', (data) => {
                      appendMessage(data, true);
                  });
              });
          });
        }

        async function sendMessage(peer) {
            const message = username.toLocaleUpperCase() + " : " + messageInput.value;
          
            const response = await fetch('/api/chat/addMessage', {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({id_chat: id_chat, email: email, content: message})
            });
            const data = await response.json();
          
            // const connections = await getConnections();
          
            const existingConnections = await getConnections();

            for (const conn of existingConnections) {
                const peer_id = conn.peer_id;
                if(peer_id == peer._id) continue
                if (connections[peer_id]) {
                // réutiliser la connexion existante
                    sendPeerMessage(connections[peer_id], message);
                } else {
                // créer une nouvelle connexion
                    console.log(peer)
                    const newConn = peer.connect(peer_id);
                    console.log(newConn)
                    connections[peer_id] = newConn;
                    newConn.on('open', () => {
                        console.log("New connection : " + newConn.peer)
                        console.log("Sending messages")
                        sendPeerMessage(newConn, message);
                    });

                    newConn.on('error', (err) => {
                        console.log("New connection error : " + err)
                    });
                }
            }

                appendMessage(message, false);

                messageInput.value = '';
            }

        function sendPeerMessage(conn, message) {
            conn.send(message);
        }
          
          

        async function getConnection() {
            const response = await fetch('/api/chat/getConnection', {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({id_chat: id_chat, email: email})
            });
            const data = await response.json();
            return data
        }
      
        window.onload = async () => {
          const data = await getConnection()
          if(!data.success) {
              alert("Erreur récupération user peer_id");
              return;
          }
      
          peer = new Peer(data["peer_id"], {
                host: "adiil.nextborn.tech",
                port: 80,
                path: '/peerjs',
            }
          );
          console.log(peer)
      
          peer.on('open', async (id) => {
            console.log("local peer opened")
              handleIncomingConnection(peer);
          });
      
          peer.on('close', () => {
            console.log("local peer closed")
          });
      
          peer.on('error', (e) => {
            console.log("local peer error : " + e)
          });

          messages.forEach((message) => {
            if(email == message["email"]) {
                appendMessage(message["content"], false)
            }else {
                appendMessage(message["content"], true)
            }
          })


          const users = await getUsers()
            users["users"].forEach((user) => {
                appendUserToList(user)
            })

            await getMembers();
        }
      </script>
      
    
</body>
</html>
